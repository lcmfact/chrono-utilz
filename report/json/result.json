{
  "stats": {
    "suites": 27,
    "tests": 86,
    "passes": 86,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-09T04:27:59.215Z",
    "end": "2025-05-09T04:27:59.231Z",
    "duration": 16
  },
  "tests": [
    {
      "title": "should return a number for a valid Date object",
      "fullTitle": "ChronoUtilz getTimezoneOffset should return a number for a valid Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return correct offset compared to native Date object",
      "fullTitle": "ChronoUtilz getTimezoneOffset should return correct offset compared to native Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw an error for invalid date string",
      "fullTitle": "ChronoUtilz getTimezoneOffset should throw an error for invalid date string",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should parse ISO date strings",
      "fullTitle": "ChronoUtilz parseDate should parse ISO date strings",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should parse Date objects",
      "fullTitle": "ChronoUtilz parseDate should parse Date objects",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should parse timestamps",
      "fullTitle": "ChronoUtilz parseDate should parse timestamps",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should parse MM/DD/YYYY format",
      "fullTitle": "ChronoUtilz parseDate should parse MM/DD/YYYY format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return null for invalid dates when throwError is false",
      "fullTitle": "ChronoUtilz parseDate should return null for invalid dates when throwError is false",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw for invalid dates when throwError is true",
      "fullTitle": "ChronoUtilz parseDate should throw for invalid dates when throwError is true",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return fallback for invalid dates",
      "fullTitle": "ChronoUtilz parseDate should return fallback for invalid dates",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates as YYYY-MM-DD by default",
      "fullTitle": "ChronoUtilz formatDate should format dates as YYYY-MM-DD by default",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates as MM/DD/YYYY",
      "fullTitle": "ChronoUtilz formatDate should format dates as MM/DD/YYYY",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates as DD/MM/YYYY",
      "fullTitle": "ChronoUtilz formatDate should format dates as DD/MM/YYYY",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates with time",
      "fullTitle": "ChronoUtilz formatDate should format dates with time",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates with month names",
      "fullTitle": "ChronoUtilz formatDate should format dates with month names",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format time only",
      "fullTitle": "ChronoUtilz formatDate should format time only",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw for unsupported formats",
      "fullTitle": "ChronoUtilz formatDate should throw for unsupported formats",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add days",
      "fullTitle": "ChronoUtilz addTime should add days",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add months",
      "fullTitle": "ChronoUtilz addTime should add months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle month overflow",
      "fullTitle": "ChronoUtilz addTime should handle month overflow",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add years",
      "fullTitle": "ChronoUtilz addTime should add years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add hours, minutes, seconds",
      "fullTitle": "ChronoUtilz addTime should add hours, minutes, seconds",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should subtract days",
      "fullTitle": "ChronoUtilz subtractTime should subtract days",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should subtract months",
      "fullTitle": "ChronoUtilz subtractTime should subtract months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should calculate difference in days",
      "fullTitle": "ChronoUtilz getDateDiff should calculate difference in days",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should calculate difference in months",
      "fullTitle": "ChronoUtilz getDateDiff should calculate difference in months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle negative differences",
      "fullTitle": "ChronoUtilz getDateDiff should handle negative differences",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return true when date is between start and end (inclusive)",
      "fullTitle": "ChronoUtilz isBetweenDates should return true when date is between start and end (inclusive)",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should consider boundary dates when inclusive is true",
      "fullTitle": "ChronoUtilz isBetweenDates should consider boundary dates when inclusive is true",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should not consider boundary dates when inclusive is false",
      "fullTitle": "ChronoUtilz isBetweenDates should not consider boundary dates when inclusive is false",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return false when date is outside range",
      "fullTitle": "ChronoUtilz isBetweenDates should return false when date is outside range",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return true for valid dates",
      "fullTitle": "ChronoUtilz isValidDate should return true for valid dates",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get start of day",
      "fullTitle": "ChronoUtilz startOf should get start of day",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get start of month",
      "fullTitle": "ChronoUtilz startOf should get start of month",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get start of year",
      "fullTitle": "ChronoUtilz startOf should get start of year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get end of day",
      "fullTitle": "ChronoUtilz endOf should get end of day",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get end of month",
      "fullTitle": "ChronoUtilz endOf should get end of month",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get end of year",
      "fullTitle": "ChronoUtilz endOf should get end of year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should calculate day of year",
      "fullTitle": "ChronoUtilz getDayOfYear should calculate day of year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle leap years",
      "fullTitle": "ChronoUtilz getDayOfYear should handle leap years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should calculate week of year",
      "fullTitle": "ChronoUtilz getWeekOfYear should calculate week of year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should identify leap years",
      "fullTitle": "ChronoUtilz isLeapYear should identify leap years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should identify non-leap years",
      "fullTitle": "ChronoUtilz isLeapYear should identify non-leap years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should work with date objects",
      "fullTitle": "ChronoUtilz isLeapYear should work with date objects",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should convert a local Date to UTC equivalent",
      "fullTitle": "ChronoUtilz toUTC should convert a local Date to UTC equivalent",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should accept string date inputs",
      "fullTitle": "ChronoUtilz toUTC should accept string date inputs",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if invalid date is provided",
      "fullTitle": "ChronoUtilz toUTC should throw if invalid date is provided",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return a string starting with \"UTC\"",
      "fullTitle": "ChronoUtilz getTimezoneString should return a string starting with \"UTC\"",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return a valid timezone format",
      "fullTitle": "ChronoUtilz getTimezoneString should return a valid timezone format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should reflect correct offset from Date object",
      "fullTitle": "ChronoUtilz getTimezoneString should reflect correct offset from Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return a Date object",
      "fullTitle": "ChronoUtilz utcNow should return a Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should be approximately equal to current UTC time",
      "fullTitle": "ChronoUtilz utcNow should be approximately equal to current UTC time",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create a valid date for year, month, and day",
      "fullTitle": "ChronoUtilz createDate should create a valid date for year, month, and day",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should default time components to zero if not provided",
      "fullTitle": "ChronoUtilz createDate should default time components to zero if not provided",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create a valid date with full time components",
      "fullTitle": "ChronoUtilz createDate should create a valid date with full time components",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if month is less than 0",
      "fullTitle": "ChronoUtilz createDate should throw if month is less than 0",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if month is greater than 11",
      "fullTitle": "ChronoUtilz createDate should throw if month is greater than 11",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if date is invalid (e.g., April 31)",
      "fullTitle": "ChronoUtilz createDate should throw if date is invalid (e.g., April 31)",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if components result in an invalid date (e.g., Feb 30)",
      "fullTitle": "ChronoUtilz createDate should throw if components result in an invalid date (e.g., Feb 30)",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should allow Feb 29 on a leap year",
      "fullTitle": "ChronoUtilz createDate should allow Feb 29 on a leap year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get correct days for 30-day months",
      "fullTitle": "ChronoUtilz getDaysInMonth should get correct days for 30-day months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get correct days for 31-day months",
      "fullTitle": "ChronoUtilz getDaysInMonth should get correct days for 31-day months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle February in leap and non-leap years",
      "fullTitle": "ChronoUtilz getDaysInMonth should handle February in leap and non-leap years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format future times",
      "fullTitle": "ChronoUtilz getRelativeTime should format future times",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format past times",
      "fullTitle": "ChronoUtilz getRelativeTime should format past times",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle just now",
      "fullTitle": "ChronoUtilz getRelativeTime should handle just now",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle longer time periods",
      "fullTitle": "ChronoUtilz getRelativeTime should handle longer time periods",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create from year, month, day",
      "fullTitle": "ChronoUtilz CalendarDate should create from year, month, day",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should convert to Date object",
      "fullTitle": "ChronoUtilz CalendarDate should convert to Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create from Date object",
      "fullTitle": "ChronoUtilz CalendarDate should create from Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should compare dates correctly",
      "fullTitle": "ChronoUtilz CalendarDate should compare dates correctly",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add time",
      "fullTitle": "ChronoUtilz CalendarDate should add time",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should check equality",
      "fullTitle": "ChronoUtilz CalendarDate should check equality",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should validate YYYY-MM-DD format",
      "fullTitle": "ChronoUtilz validateDateFormat should validate YYYY-MM-DD format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should validate MM/DD/YYYY format",
      "fullTitle": "ChronoUtilz validateDateFormat should validate MM/DD/YYYY format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should validate time formats",
      "fullTitle": "ChronoUtilz validateDateFormat should validate time formats",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should generate a daily inclusive date range",
      "fullTitle": "ChronoUtilz generateDateRange should generate a daily inclusive date range",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw for invalid range",
      "fullTitle": "ChronoUtilz generateDateRange should throw for invalid range",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format duration in long format by default",
      "fullTitle": "ChronoUtilz formatDuration should format duration in long format by default",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format duration in short format",
      "fullTitle": "ChronoUtilz formatDuration should format duration in short format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle 0 ms",
      "fullTitle": "ChronoUtilz formatDuration should handle 0 ms",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return correct quarter",
      "fullTitle": "ChronoUtilz getQuarter should return correct quarter",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw on invalid date",
      "fullTitle": "ChronoUtilz getQuarter should throw on invalid date",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should count weekdays excluding weekends and holidays",
      "fullTitle": "ChronoUtilz getBusinessDays should count weekdays excluding weekends and holidays",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return age in years",
      "fullTitle": "ChronoUtilz calculateAge should return age in years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return detailed age in years, months, and days",
      "fullTitle": "ChronoUtilz calculateAge should return detailed age in years, months, and days",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [],
  "passes": [
    {
      "title": "should return a number for a valid Date object",
      "fullTitle": "ChronoUtilz getTimezoneOffset should return a number for a valid Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return correct offset compared to native Date object",
      "fullTitle": "ChronoUtilz getTimezoneOffset should return correct offset compared to native Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw an error for invalid date string",
      "fullTitle": "ChronoUtilz getTimezoneOffset should throw an error for invalid date string",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should parse ISO date strings",
      "fullTitle": "ChronoUtilz parseDate should parse ISO date strings",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should parse Date objects",
      "fullTitle": "ChronoUtilz parseDate should parse Date objects",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should parse timestamps",
      "fullTitle": "ChronoUtilz parseDate should parse timestamps",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should parse MM/DD/YYYY format",
      "fullTitle": "ChronoUtilz parseDate should parse MM/DD/YYYY format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return null for invalid dates when throwError is false",
      "fullTitle": "ChronoUtilz parseDate should return null for invalid dates when throwError is false",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw for invalid dates when throwError is true",
      "fullTitle": "ChronoUtilz parseDate should throw for invalid dates when throwError is true",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return fallback for invalid dates",
      "fullTitle": "ChronoUtilz parseDate should return fallback for invalid dates",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates as YYYY-MM-DD by default",
      "fullTitle": "ChronoUtilz formatDate should format dates as YYYY-MM-DD by default",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates as MM/DD/YYYY",
      "fullTitle": "ChronoUtilz formatDate should format dates as MM/DD/YYYY",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates as DD/MM/YYYY",
      "fullTitle": "ChronoUtilz formatDate should format dates as DD/MM/YYYY",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates with time",
      "fullTitle": "ChronoUtilz formatDate should format dates with time",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format dates with month names",
      "fullTitle": "ChronoUtilz formatDate should format dates with month names",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format time only",
      "fullTitle": "ChronoUtilz formatDate should format time only",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw for unsupported formats",
      "fullTitle": "ChronoUtilz formatDate should throw for unsupported formats",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add days",
      "fullTitle": "ChronoUtilz addTime should add days",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add months",
      "fullTitle": "ChronoUtilz addTime should add months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle month overflow",
      "fullTitle": "ChronoUtilz addTime should handle month overflow",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add years",
      "fullTitle": "ChronoUtilz addTime should add years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add hours, minutes, seconds",
      "fullTitle": "ChronoUtilz addTime should add hours, minutes, seconds",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should subtract days",
      "fullTitle": "ChronoUtilz subtractTime should subtract days",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should subtract months",
      "fullTitle": "ChronoUtilz subtractTime should subtract months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should calculate difference in days",
      "fullTitle": "ChronoUtilz getDateDiff should calculate difference in days",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should calculate difference in months",
      "fullTitle": "ChronoUtilz getDateDiff should calculate difference in months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle negative differences",
      "fullTitle": "ChronoUtilz getDateDiff should handle negative differences",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return true when date is between start and end (inclusive)",
      "fullTitle": "ChronoUtilz isBetweenDates should return true when date is between start and end (inclusive)",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should consider boundary dates when inclusive is true",
      "fullTitle": "ChronoUtilz isBetweenDates should consider boundary dates when inclusive is true",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should not consider boundary dates when inclusive is false",
      "fullTitle": "ChronoUtilz isBetweenDates should not consider boundary dates when inclusive is false",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return false when date is outside range",
      "fullTitle": "ChronoUtilz isBetweenDates should return false when date is outside range",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return true for valid dates",
      "fullTitle": "ChronoUtilz isValidDate should return true for valid dates",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get start of day",
      "fullTitle": "ChronoUtilz startOf should get start of day",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get start of month",
      "fullTitle": "ChronoUtilz startOf should get start of month",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get start of year",
      "fullTitle": "ChronoUtilz startOf should get start of year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get end of day",
      "fullTitle": "ChronoUtilz endOf should get end of day",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get end of month",
      "fullTitle": "ChronoUtilz endOf should get end of month",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get end of year",
      "fullTitle": "ChronoUtilz endOf should get end of year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should calculate day of year",
      "fullTitle": "ChronoUtilz getDayOfYear should calculate day of year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle leap years",
      "fullTitle": "ChronoUtilz getDayOfYear should handle leap years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should calculate week of year",
      "fullTitle": "ChronoUtilz getWeekOfYear should calculate week of year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should identify leap years",
      "fullTitle": "ChronoUtilz isLeapYear should identify leap years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should identify non-leap years",
      "fullTitle": "ChronoUtilz isLeapYear should identify non-leap years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should work with date objects",
      "fullTitle": "ChronoUtilz isLeapYear should work with date objects",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should convert a local Date to UTC equivalent",
      "fullTitle": "ChronoUtilz toUTC should convert a local Date to UTC equivalent",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should accept string date inputs",
      "fullTitle": "ChronoUtilz toUTC should accept string date inputs",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if invalid date is provided",
      "fullTitle": "ChronoUtilz toUTC should throw if invalid date is provided",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return a string starting with \"UTC\"",
      "fullTitle": "ChronoUtilz getTimezoneString should return a string starting with \"UTC\"",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return a valid timezone format",
      "fullTitle": "ChronoUtilz getTimezoneString should return a valid timezone format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should reflect correct offset from Date object",
      "fullTitle": "ChronoUtilz getTimezoneString should reflect correct offset from Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return a Date object",
      "fullTitle": "ChronoUtilz utcNow should return a Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should be approximately equal to current UTC time",
      "fullTitle": "ChronoUtilz utcNow should be approximately equal to current UTC time",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create a valid date for year, month, and day",
      "fullTitle": "ChronoUtilz createDate should create a valid date for year, month, and day",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should default time components to zero if not provided",
      "fullTitle": "ChronoUtilz createDate should default time components to zero if not provided",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create a valid date with full time components",
      "fullTitle": "ChronoUtilz createDate should create a valid date with full time components",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if month is less than 0",
      "fullTitle": "ChronoUtilz createDate should throw if month is less than 0",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if month is greater than 11",
      "fullTitle": "ChronoUtilz createDate should throw if month is greater than 11",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if date is invalid (e.g., April 31)",
      "fullTitle": "ChronoUtilz createDate should throw if date is invalid (e.g., April 31)",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw if components result in an invalid date (e.g., Feb 30)",
      "fullTitle": "ChronoUtilz createDate should throw if components result in an invalid date (e.g., Feb 30)",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should allow Feb 29 on a leap year",
      "fullTitle": "ChronoUtilz createDate should allow Feb 29 on a leap year",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get correct days for 30-day months",
      "fullTitle": "ChronoUtilz getDaysInMonth should get correct days for 30-day months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should get correct days for 31-day months",
      "fullTitle": "ChronoUtilz getDaysInMonth should get correct days for 31-day months",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle February in leap and non-leap years",
      "fullTitle": "ChronoUtilz getDaysInMonth should handle February in leap and non-leap years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format future times",
      "fullTitle": "ChronoUtilz getRelativeTime should format future times",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format past times",
      "fullTitle": "ChronoUtilz getRelativeTime should format past times",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle just now",
      "fullTitle": "ChronoUtilz getRelativeTime should handle just now",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle longer time periods",
      "fullTitle": "ChronoUtilz getRelativeTime should handle longer time periods",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create from year, month, day",
      "fullTitle": "ChronoUtilz CalendarDate should create from year, month, day",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should convert to Date object",
      "fullTitle": "ChronoUtilz CalendarDate should convert to Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create from Date object",
      "fullTitle": "ChronoUtilz CalendarDate should create from Date object",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should compare dates correctly",
      "fullTitle": "ChronoUtilz CalendarDate should compare dates correctly",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add time",
      "fullTitle": "ChronoUtilz CalendarDate should add time",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should check equality",
      "fullTitle": "ChronoUtilz CalendarDate should check equality",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should validate YYYY-MM-DD format",
      "fullTitle": "ChronoUtilz validateDateFormat should validate YYYY-MM-DD format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should validate MM/DD/YYYY format",
      "fullTitle": "ChronoUtilz validateDateFormat should validate MM/DD/YYYY format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should validate time formats",
      "fullTitle": "ChronoUtilz validateDateFormat should validate time formats",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should generate a daily inclusive date range",
      "fullTitle": "ChronoUtilz generateDateRange should generate a daily inclusive date range",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw for invalid range",
      "fullTitle": "ChronoUtilz generateDateRange should throw for invalid range",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format duration in long format by default",
      "fullTitle": "ChronoUtilz formatDuration should format duration in long format by default",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should format duration in short format",
      "fullTitle": "ChronoUtilz formatDuration should format duration in short format",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle 0 ms",
      "fullTitle": "ChronoUtilz formatDuration should handle 0 ms",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return correct quarter",
      "fullTitle": "ChronoUtilz getQuarter should return correct quarter",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should throw on invalid date",
      "fullTitle": "ChronoUtilz getQuarter should throw on invalid date",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should count weekdays excluding weekends and holidays",
      "fullTitle": "ChronoUtilz getBusinessDays should count weekdays excluding weekends and holidays",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return age in years",
      "fullTitle": "ChronoUtilz calculateAge should return age in years",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return detailed age in years, months, and days",
      "fullTitle": "ChronoUtilz calculateAge should return detailed age in years, months, and days",
      "file": "/Users/mc/Desktop/projects/OSS/chrono-utilz/tests/datewise.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    }
  ]
}